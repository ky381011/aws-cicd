name: lambda

on:
  # push:
  #   branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      OPERATE:
        description: "Choose operation"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

env:
  AWS_REGION: ap-northeast-1
  JOB_NAME: lambda # Same as job name
  STORE_PATH: state/${{ github.event.repository.name }}/lambda
  TERRAFORM_WORK_DIR: src/lambda/terraform
  APP_WORK_DIR: src/lambda/app
  PYTHON_VERSION: 3.13
  PACKAGE_PATH: lambda.zip

permissions:
  id-token: write
  contents: read

jobs:
  check:
    if: github.event_name != 'workflow_dispatch'
    name: check credentials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_VPC_ACCESS_ROLE }}'

  diff:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.diff.outputs.changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check diff in target directory
        id: diff
        run: |
          if git diff --quiet HEAD^ HEAD -- ${{ env.APP_WORK_DIR }}; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  test:
    needs: diff
    if: needs.diff.outputs.changed == 'true'
    name: test lambda
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Test python
        run: |
            python ${{ env.APP_WORK_DIR }}/test_return_hash.py


  deploy:
    if: github.event_name == 'workflow_dispatch'
    name: deploy lambda
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_VPC_ACCESS_ROLE }}'

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd ${{ env.APP_WORK_DIR }}
          pip install -r requirements.txt -t lib

      - name: Create deployment package
        run: |
          cd ${{ env.APP_WORK_DIR }}
          ls -al
          zip -r ../${{ env.TERRAFORM_WORK_DIR}}/${{ env.PACKAGE_PATH}} .

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Get state file
        uses: ./.github/actions/_tfstate_pull_module/
        with:
          state_repo_name: ${{ secrets.STATE_REPO_NAME }}
          state_repo_token: ${{ secrets.STATE_REPO_TOKEN }}
          store_path: ${{ env.STORE_PATH }}
          terraform_work_path: ${{ env.TERRAFORM_WORK_DIR}}

      - name: Deploy process apply
        if: ${{ github.event.inputs.OPERATE == 'apply' }}
        uses: ./.github/actions/_terraform_apply_module/
        with:
          terraform_work_path: ${{ env.TERRAFORM_WORK_DIR}}

      - name: Deploy process destroy
        if: ${{ github.event.inputs.OPERATE == 'destroy' }}
        uses: ./.github/actions/_terraform_destroy_module/
        with:
          terraform_work_path: ${{ env.TERRAFORM_WORK_DIR}}

      - name: Upload state file
        uses: ./.github/actions/_tfstate_push_module/
        with:
          state_repo_name: ${{ secrets.STATE_REPO_NAME }}
          state_repo_token: ${{ secrets.STATE_REPO_TOKEN }}
          store_path: ${{ env.STORE_PATH }}
          terraform_work_path: ${{ env.TERRAFORM_WORK_DIR}}
          