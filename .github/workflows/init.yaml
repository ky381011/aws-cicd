name: init

on:
  # push:
  #   branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1

permissions:
  id-token: write
  contents: read


jobs:
  delivery:
    name: aws-cd
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_CICD_ROLE }}'

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_CICD_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Generate inventory
        run: |
          mkdir -p ansible
          cat <<EOF > ansible/inventory.ini
          [web]
          ${{ secrets.EC2_CICD_HOST }} ansible_user=${{ secrets.EC2_CICD_USER }} ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_python_interpreter=/usr/bin/python3
          EOF

      # - name: Install Ansible
      #   run: |
      #     sudo apt update
      #     sudo apt install -y ansible

      - name: Fetch memory usage from EC2
        id: memory
        run: |
          INSTANCE_ID=${{ secrets.AWS_EC2_INSTANCE_ID }}

          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Check memory usage" \
            --parameters commands="free -m" \
            --output text \
            --query "Command.CommandId")

          echo "Command ID: $COMMAND_ID"

          for i in {1..12}; do
            STATUS=$(aws ssm list-command-invocations \
              --command-id "$COMMAND_ID" \
              --details \
              --query "CommandInvocations[0].Status" \
              --output text)

            echo "Status: $STATUS"

            if [ "$STATUS" = "Success" ]; then
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "SSM Command failed"
              exit 1
            fi

            sleep 10
          done

          echo "Memory usage:"
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query "StandardOutputContent" \
            --output text